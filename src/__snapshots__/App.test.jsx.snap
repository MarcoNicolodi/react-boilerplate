// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App component should match snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <WithStyles(ButtonAppBar) />,
        <div
          style={
            Object {
              "alignContent": "center",
              "display": "flex",
              "justifyContent": "center",
            }
          }
        >
          <WithStyles(Typography)
            variant="h2"
          >
            Make wonderful things!
          </WithStyles(Typography)>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <WithStyles(Typography)
            variant="h2"
          >
            Make wonderful things!
          </WithStyles(Typography)>,
          "style": Object {
            "alignContent": "center",
            "display": "flex",
            "justifyContent": "center",
          },
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": "Make wonderful things!",
            "variant": "h2",
          },
          "ref": null,
          "rendered": "Make wonderful things!",
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <WithStyles(ButtonAppBar) />,
          <div
            style={
              Object {
                "alignContent": "center",
                "display": "flex",
                "justifyContent": "center",
              }
            }
          >
            <WithStyles(Typography)
              variant="h2"
            >
              Make wonderful things!
            </WithStyles(Typography)>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <WithStyles(Typography)
              variant="h2"
            >
              Make wonderful things!
            </WithStyles(Typography)>,
            "style": Object {
              "alignContent": "center",
              "display": "flex",
              "justifyContent": "center",
            },
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Make wonderful things!",
              "variant": "h2",
            },
            "ref": null,
            "rendered": "Make wonderful things!",
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
